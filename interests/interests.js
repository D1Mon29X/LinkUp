    import createUserId from '../utils/utils.js';

        const selectedInterests = [];

        const buttonsElements = document.querySelectorAll('.interest-button'); // Get all button elements

        const saveAllInterests = async (selectedInterests) => {
            const data = { interests: selectedInterests };
            const stringifiedData = JSON.stringify(data);

            try {
                const response = await fetch('https://example.com/api/interests', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json'
                    },
                    body: stringifiedData
                })

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

            } catch (error) {
                console.error('Network error. –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:', error);
                const userId = localStorage.getItem("userId");
                if (!userId) {
                    // –Ø–∫—â–æ userId –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
                    localStorage.setItem("userId", JSON.stringify(createUserId()));
                }   
                localStorage.setItem("userInterests", JSON.stringify({
                        saveDate: new Date().toISOString(),
                        interests: selectedInterests,
                        userId: localStorage.getItem("userId") 
                    })
                );
            }
        };

        buttonsElements.forEach(button => {

            button.addEventListener('click', async (event) => {

                const interest = button.getAttribute('data-interest');
                const index = selectedInterests.indexOf(interest);

                if (index === -1) {
                    selectedInterests.push(interest);
                    button.classList.add('selected');
                } else {
                    selectedInterests.splice(index, 1);
                    button.classList.remove('selected');
                }

                console.log('–û–±—Ä–∞–Ω—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏:', selectedInterests);
                // Here you can send the selected interests to the server or handle them as needed
                saveAllInterests(selectedInterests);
            });
      });

      // üü¢ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ localStorage –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
      window.addEventListener("load", () => {
       
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ –≤ localStorage
        const savedInterests = localStorage.getItem("userInterests");
        if (savedInterests) {
            const parsedInterests = JSON.parse(savedInterests);
            const interestsArray = parsedInterests.interests || [];
            interestsArray.forEach((interest) => {
                const button = document.querySelector(`.interest-button[data-interest="${interest}"]`);
                if (button) {
                    button.classList.add("selected");
                    selectedInterests.push(interest);
                }
            });

            console.log("–í—ñ–¥–Ω–æ–≤–ª–µ–Ω—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏:", selectedInterests);
        }
      });

      // üî¥ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º
      window.addEventListener("beforeunload", (event) => {
        // Here you can send the selected interests to the server or handle them as needed
        saveAllInterests(selectedInterests);

        // –í–∏–≤–æ–¥–∏–º–æ —Å–∏—Å—Ç–µ–º–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (–ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º)
        event.preventDefault();
        event.returnValue = ""; // –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è –¥–µ—è–∫–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤ (Chrome, Firefox)
      });